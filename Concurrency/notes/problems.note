## Start ----

Given an array
[x1,x2,x3...xn,y1,y2,y3,y4...yn,z1,z2,z3,...zn]
Convert it to 
[x1,y1,z1,x2,y2,z2,x3,y3,z3......xn,yn,zn].

Try to solve it inplace and using constant extra space.

#Its a Matrix Transpose problem using extra space increases complexity
#Inplace

## Start 

  #Inplace 
  Inplace Merge Sort and how does it increases Temporal complexity

## Start ----

You are given an array representing trade price for a stock each day. You can buy or sell the stock at that given price.

Each day, you can either buy one share, sell any number of shares that you own or not make any transaction at all. Given the trade price for the stock across several days (as an array), what is the maximum profit you can obtain?

# You keep track of monotonically increasing numbers from other end of the array


## Start ----

Given two binary trees, find if second one is mirror image of first

bool isMirrored(Node t1, Node t2) {
       if(t1== null && t2 == null) {
            return true;
       }else if( t1 == null ||  t2 == null) {
            return false;    
       }
       return  t1.data ==  t2.data   && isMirrored(t1.left, t2.right) && isMirrored(t1.right, t2.left);
}

## Start ----

Largest Sum Contiguous Subarray

  /**
     * Keep Two Counters One for Maximum sum and the Other for 
     * Continuous sum till it reach zeroes. If the sum reaches less than 
     * zero than the LSCS  lies ahead of already have been found
     * 
     */
    public static void main(String[] args) {
        int arr[] = new int[]{1, 7, 3, -12, 5, 7, -2, 3};
        int max_sum = 0;
        int sumTillZero = 0;
        for(int i = 0;i<arr.length;i++) {
            sumTillZero = sumTillZero + arr[i]<0 ? 0 : sumTillZero + arr[i];
            max_sum        = sumTillZero > max_sum ? sumTillZero : max_sum;
        }
        System.out.println(max_sum);
    }
    
    # Solve for the case for all negative integers
    # Suppose you have an NxN matrix of positive and negative integers. Write some code that finds the sub-matrix with the maximum sum of its elements
    
## Start ----

  Largest altering subsequence.    
 # need to understand the problem
 
## Start ----
 

 Count the number of “holes” in a bitmap
 
 This has one two holes
  
11111  
10101  
10101  
11111

This has two holes

11111  
10001  
10101  
11111

# for more info http://stackoverflow.com/questions/4025980/count-the-number-of-holes-in-a-bitmap
 
##Start
Rod Cutting

The rod-cutting problem is the following. Given a rod of length n inches and a table of prices Pi for i = 1, 2, ... n, 
determine the maximum revenue Rn obtainable by cutting up the rod and selling the pieces. 
Note that if the price Pn for a rod of length n is large enough, an optimal solution may require no cutting at all.

ref : http://mypathtothe4.blogspot.com/2013/03/ 
#DP 

##Start
Task Scheduling

#Greedy

##Start
Activity Selection

#Check if Activity Times Overlap will greedy works

#Greedy

##Start

Covering Dots with Circles
ref:http://mypathtothe4.blogspot.com/2013/03/
#SetCoverProblem
 
  
 ##Start
 
 Design and describe a system/application that will most efficiently produce a report of the top 1 million Google search requests. 
 These are the particulars: 
 1) You are given 12 servers to work with. They are all dual-processor machines with 4Gb of RAM, 4x400GB hard drives and networked together.(Basically, nothing more than high-end PC’s) 
 2) The log data has already been cleaned for you. It consists of 100 Billion log lines, broken down into 12 320 GB files of 40-byte search terms per line. 
 3) You can use only custom written applications or available free open-source software.
 #do
 #Design
 
 ##Start
 
 There is an array A[N] of N numbers. You have to compose an array Output[N] such that Output[i] will be equal to multiplication of all the elements of A[N] except A[i]. 
 For example Output[0] will be multiplication of A[1] to A[N-1] and Output[1] will be multiplication of A[0] and from A[2] to A[N-1]. 
 Solve it without division operator and in O(n).
 #do
 
 ##Start
 
 You are given an array [a1 To an] and we have to construct another array [b1 To bn] where bi = a1*a2*...*an/ai. 
 you are allowed to use only constant space and the time complexity is O(n). No divisions are allowed.
 
 #do
 
 ##Start
 
You are given a small sorted list of numbers, and a very very long sorted list of numbers - so long that it had to be put on a disk in different blocks. How would you find those short list numbers in the bigger one?
The key point is to store at lease len(small_str) - 1 data in memory before reading the next block.

#Large Data
 
 ##Start
 Find or determine non existence of a number in a sorted list of N numbers where the numbers range over M, M>> N and N large enough to span multiple disks. 
 Algorithm to beat O(log n) bonus points for constant time algorithm.
 
 #do
 
 
 
 
 ###Good
 http://zhigang.org/wiki/GoogleInterviewQuestions#google-interview-questions-software-engineer
 